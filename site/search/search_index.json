{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation Project conducted by Qinren . Introduction Here I want to realsize the blockchain simulation system mainly in Python environment. This peoject have not finished yet, the codes will be updated in the future. There is a demo basic_test.py illustrates the key principle of BlockChain, i.e. the index, hash, data, timestamp(nonce value not include yet) basic_test.py # -*- coding: utf-8 -*- \"\"\" @author: hivictor \"\"\" import hashlib import datetime class BatteryCoin: def __init__(self,index,timestamp,data,nexthash): self.index = index self.timestamp = timestamp self.data = data self.nexthash = nexthash self.selfhash = self.hash_BatteryCoin() def hash_BatteryCoin(self): sha = hashlib.sha256()#hash\u52a0\u5bc6\u7b97\u6cd5,SHA\u662fhash\u7b97\u6cd5\u7684\u4e00\u79cd\uff0c\u6240\u6709\u540d\u5b57sha\u4e0d\u80fd\u4fee\u6539\uff0c\u8fd8\u6709md5\u7b97\u6cd5 datastr = str(self.index) + str(self.timestamp) + str(self.data) + str(self.nexthash) sha.update(datastr.encode(\"utf-8\"))#\u628a\u5b57\u7b26\u4e32\u6570\u636e\u53d8\u6210\u4e8c\u8fdb\u5236 return sha.hexdigest() def create_first_block():#\u521b\u4e16\u533a\u5757 return BatteryCoin(0, datetime.datetime.now(), \"233\", \"0\")#\u6700\u540e\u4e00\u4e2a0\u76f8\u5f53\u4e8e\u521b\u4e16\u533a\u5757\u7684\u5f53\u524d\u54c8\u5e0c\u503c\uff0c\u53ef\u4ee5\u8c03\u8282 def create_blocks(last_block):#\u533a\u5757\u94fe\u7684\u5176\u4ed6\u5feb now_index = last_block.index + 1 now_timestamp = datetime.datetime.now() now_data = \"233\" + str(now_index)#\u6a21\u62df\u672c\u533a\u5757\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u8c03\u8282 now_hash = last_block.selfhash#\u672c\u533a\u5757\u7684\u54c8\u5e0c\u503c\u5c31\u7b49\u4e8e\u4e0a\u4e00\u533a\u5757\u7684\u54c8\u5e0c\u503c return BatteryCoin(now_index, now_timestamp, now_data, now_hash) ####################\u6a21\u62df\u521b\u5efa\u4e00\u4e2a\u533a\u5757\u94fe\uff0c\u94fe\u8868\u7684\u6837\u5b50##################### Battery = [create_first_block()] blocks_num = 10 head_block = Battery[0]#\u521b\u4e16\u533a\u5757 print(head_block.index, head_block.timestamp, head_block.data, head_block.nexthash, head_block.selfhash) for block_index in range(blocks_num): block_add = create_blocks(head_block) Battery.append(block_add) head_block = block_add#\u5faa\u73af\uff0c\u6211\u611f\u89c9\u6700\u91cd\u8981\u7684\u662f\u628a\u533a\u5757\u7684\u54c8\u5e0c\u503c\u4f20\u7ed9\u4e86\u4e0b\u4e00\u4e2a\u533a\u5757 print(block_add.index, block_add.timestamp, block_add.data, block_add.selfhash, block_add.nexthash)","title":"Documentation"},{"location":"#documentation","text":"Project conducted by Qinren .","title":"Documentation"},{"location":"#introduction","text":"Here I want to realsize the blockchain simulation system mainly in Python environment. This peoject have not finished yet, the codes will be updated in the future. There is a demo basic_test.py illustrates the key principle of BlockChain, i.e. the index, hash, data, timestamp(nonce value not include yet)","title":"Introduction"},{"location":"#basic_testpy","text":"# -*- coding: utf-8 -*- \"\"\" @author: hivictor \"\"\" import hashlib import datetime class BatteryCoin: def __init__(self,index,timestamp,data,nexthash): self.index = index self.timestamp = timestamp self.data = data self.nexthash = nexthash self.selfhash = self.hash_BatteryCoin() def hash_BatteryCoin(self): sha = hashlib.sha256()#hash\u52a0\u5bc6\u7b97\u6cd5,SHA\u662fhash\u7b97\u6cd5\u7684\u4e00\u79cd\uff0c\u6240\u6709\u540d\u5b57sha\u4e0d\u80fd\u4fee\u6539\uff0c\u8fd8\u6709md5\u7b97\u6cd5 datastr = str(self.index) + str(self.timestamp) + str(self.data) + str(self.nexthash) sha.update(datastr.encode(\"utf-8\"))#\u628a\u5b57\u7b26\u4e32\u6570\u636e\u53d8\u6210\u4e8c\u8fdb\u5236 return sha.hexdigest() def create_first_block():#\u521b\u4e16\u533a\u5757 return BatteryCoin(0, datetime.datetime.now(), \"233\", \"0\")#\u6700\u540e\u4e00\u4e2a0\u76f8\u5f53\u4e8e\u521b\u4e16\u533a\u5757\u7684\u5f53\u524d\u54c8\u5e0c\u503c\uff0c\u53ef\u4ee5\u8c03\u8282 def create_blocks(last_block):#\u533a\u5757\u94fe\u7684\u5176\u4ed6\u5feb now_index = last_block.index + 1 now_timestamp = datetime.datetime.now() now_data = \"233\" + str(now_index)#\u6a21\u62df\u672c\u533a\u5757\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u8c03\u8282 now_hash = last_block.selfhash#\u672c\u533a\u5757\u7684\u54c8\u5e0c\u503c\u5c31\u7b49\u4e8e\u4e0a\u4e00\u533a\u5757\u7684\u54c8\u5e0c\u503c return BatteryCoin(now_index, now_timestamp, now_data, now_hash) ####################\u6a21\u62df\u521b\u5efa\u4e00\u4e2a\u533a\u5757\u94fe\uff0c\u94fe\u8868\u7684\u6837\u5b50##################### Battery = [create_first_block()] blocks_num = 10 head_block = Battery[0]#\u521b\u4e16\u533a\u5757 print(head_block.index, head_block.timestamp, head_block.data, head_block.nexthash, head_block.selfhash) for block_index in range(blocks_num): block_add = create_blocks(head_block) Battery.append(block_add) head_block = block_add#\u5faa\u73af\uff0c\u6211\u611f\u89c9\u6700\u91cd\u8981\u7684\u662f\u628a\u533a\u5757\u7684\u54c8\u5e0c\u503c\u4f20\u7ed9\u4e86\u4e0b\u4e00\u4e2a\u533a\u5757 print(block_add.index, block_add.timestamp, block_add.data, block_add.selfhash, block_add.nexthash)","title":"basic_test.py"}]}